{"version":3,"sources":["components/Toditem.js","data/tododata.js","App.js","reportWebVitals.js","index.js"],"names":["ToDoItem","props","className","type","checked","onChange","handleChange","task","onClick","handleClick","todos","id","completed","App","useState","ToDoData","toDo","setToDo","toDoInput","useRef","ref","e","preventDefault","toDoLast","length","newTask","current","value","handleAddClick","map","item","updatedToDo","filter","handleRemoveClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8NAuBeA,EArBE,SAACC,GAChB,OACE,qBAAKC,UAAU,YAAf,SACE,sBAAKA,UAAU,YAAf,UACE,uBACEC,KAAK,WACLC,QAASH,EAAMG,QACfC,SAAUJ,EAAMK,aAChBJ,UAAU,UAEXD,EAAMG,QACL,mBAAGF,UAAU,YAAb,SAA0BD,EAAMM,OAEhC,4BAAIN,EAAMM,OAEZ,wBAAQC,QAASP,EAAMQ,YAAvB,0BCCOC,EAlBD,CACZ,CACEC,GAAI,EACJJ,KAAM,iBACNK,WAAW,GAEb,CACED,GAAI,EACJJ,KAAM,cACNK,WAAW,GAEb,CACED,GAAI,EACJJ,KAAM,gBACNK,WAAW,IC2DAC,EApEH,WACV,MAAwBC,mBAASC,GAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACMC,EAAYC,mBA4ClB,OACE,sBAAKjB,UAAU,iBAAf,UACE,yCACA,sBAAKA,UAAU,kBAAf,UACE,uBAAOC,KAAK,OAAOiB,IAAKF,IACxB,wBAAQV,QAAS,SAACa,GAAD,OA/BA,SAACA,GACtBA,EAAEC,iBAIF,IAAIC,EAAWP,EAAKQ,OAAS,EAKzBC,EAAU,CACZd,GALUK,EAAKO,GAAUZ,GAAK,EAM9BJ,KAJeW,EAAUQ,QAAQC,MAKjCf,WAAW,GAIbK,GAAQ,SAACD,GAAD,4BAAcA,GAAd,CAAoBS,OAcAG,CAAeP,IAAvC,yBAEF,qBAAKnB,UAAU,kBAAf,SACGc,EAAKa,KAAI,SAACC,GAAD,OACR,cAAC,EAAD,CACEvB,KAAMuB,EAAKvB,KACXH,QAAS0B,EAAKlB,UAEdN,aAAc,kBAvDH,SAACK,GAGpB,IAAMoB,EAAcf,EAAKa,KAAI,SAACC,GAC5B,OAAIA,EAAKnB,KAAOA,EACP,2BACFmB,GADL,IAEElB,WAAYkB,EAAKlB,YAGdkB,KAGTb,EAAQc,GA0CoBzB,CAAawB,EAAKnB,KACtCF,YAAa,kBApBG,SAACE,GAEzB,IAAMoB,EAAcf,EAAKgB,QAAO,SAACF,GAAD,OAAUA,EAAKnB,KAAOA,KACtDM,EAAQc,GAiBmBE,CAAkBH,EAAKnB,MAFrCmB,EAAKnB,aCnDPuB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.be565ff6.chunk.js","sourcesContent":["import React from \"react\";\n\nconst ToDoItem = (props) => {\n  return (\n    <div className=\"todo-list\">\n      <div className=\"todo-item\">\n        <input\n          type=\"checkbox\"\n          checked={props.checked}\n          onChange={props.handleChange}\n          className=\"input\"\n        />\n        {props.checked ? (\n          <p className=\"completed\">{props.task}</p>\n        ) : (\n          <p>{props.task}</p>\n        )}\n        <button onClick={props.handleClick}>Remove</button>\n      </div>\n    </div>\n  );\n};\n\nexport default ToDoItem;\n","const todos = [\n  {\n    id: 1,\n    task: \"Take out Trash\",\n    completed: false,\n  },\n  {\n    id: 2,\n    task: \"Cook Dinner\",\n    completed: false,\n  },\n  {\n    id: 3,\n    task: \"Buy Groceries\",\n    completed: true,\n  },\n];\n\nexport default todos;\n","import React, { useState, useRef } from \"react\";\nimport \"./App.css\";\nimport ToDoItem from \"./components/Toditem\";\nimport ToDoData from \"./data/tododata\";\n\nconst App = () => {\n  const [toDo, setToDo] = useState(ToDoData);\n  const toDoInput = useRef();\n\n  const handleChange = (id) => {\n    // looping over array and returning a new version of the array,\n    // toggling completed properties value\n    const updatedToDo = toDo.map((item) => {\n      if (item.id === id) {\n        return {\n          ...item,\n          completed: !item.completed,\n        };\n      }\n      return item;\n    });\n\n    setToDo(updatedToDo);\n  };\n\n  const handleAddClick = (e) => {\n    e.preventDefault();\n\n    // get the last item in array's id, and add 1 to it.\n    // This sets new object's id as 1 more than previous id\n    let toDoLast = toDo.length - 1;\n    let newId = toDo[toDoLast].id + 1;\n\n    let inputValue = toDoInput.current.value;\n\n    let newTask = {\n      id: newId,\n      task: inputValue,\n      completed: false,\n    };\n\n    // adding/pushing element to end of array\n    setToDo((toDo) => [...toDo, newTask]);\n  };\n\n  const handleRemoveClick = (id) => {\n    // creating new array with the clicked item(id) removed\n    const updatedToDo = toDo.filter((item) => item.id !== id);\n    setToDo(updatedToDo);\n  };\n\n  return (\n    <div className=\"task-container\">\n      <h1>To DO's</h1>\n      <div className=\"input-container\">\n        <input type=\"text\" ref={toDoInput} />\n        <button onClick={(e) => handleAddClick(e)}>ADD TASK</button>\n      </div>\n      <div className=\"to-do-container\">\n        {toDo.map((item) => (\n          <ToDoItem\n            task={item.task}\n            checked={item.completed}\n            key={item.id}\n            handleChange={() => handleChange(item.id)}\n            handleClick={() => handleRemoveClick(item.id)}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}